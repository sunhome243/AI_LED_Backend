name: "Terraform"

on:
  push:
    branches: ["main"]
  pull_request:

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ${{ secrets.REGION_NAME }}
  TF_VAR_GOOGLE_GEMINI_API_KEY: ${{ secrets.TF_VAR_GOOGLE_GEMINI_API_KEY }}
  TF_VAR_REGION_NAME: ${{ secrets.TF_VAR_REGION_NAME }}

permissions:
  contents: read

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v4

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Log In AWS
        run: aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID && aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY && aws configure set region $AWS_REGION

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: terraform init -var "GOOGLE_GEMINI_API_KEY=$TF_VAR_GOOGLE_GEMINI_API_KEY" -var "AWS_REGION_NAME=$TF_VAR_REGION_NAME"

      # Format Terraform configuration files to a canonical format and style
      - name: Terraform Format
        run: terraform fmt

      # Checks that all Terraform configuration files adhere to a canonical format
      - name: Terraform Format Check
        run: terraform fmt -check

      # Generates an execution plan for Terraform
      - name: Terraform Plan
        run: terraform plan -input=false

        # On push to "main", build or change infrastructure according to Terraform configuration files
      - name: Terraform Apply
        if: github.ref == 'refs/heads/"main"' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false
